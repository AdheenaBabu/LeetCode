/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        TreeNode* curr1 = root->left;
        TreeNode* curr2 = root->right;
        if (curr1 != NULL && curr2 != NULL && curr1->val == curr2->val){
            return Symmetric(curr1,curr2);
        }
        else if(curr1==NULL && curr2==NULL){
            return true;
        }
        return false;
    }
    
    bool Symmetric(TreeNode* c1, TreeNode* c2){
        vector<int> res1;
        vector<int> res2;
        PreOrder(res1,c1);
        MirrorOrder(res2,c2);
        if(res1 == res2){
            return true;
        }
        return false;
    }
    
    void PreOrder(vector<int> &res, TreeNode* curr){
        if(curr != NULL){
            res.push_back(curr->val);
            if(curr->left != NULL){
                PreOrder(res,curr->left);
            }
            else{
                res.push_back(0);
            }
            if(curr->right != NULL){
                PreOrder(res,curr->right);
            }
            else{
                res.push_back(0);
            }
        }
    }
    
    void MirrorOrder(vector<int> &res, TreeNode* curr){
        if(curr != NULL){
            res.push_back(curr->val);
            if(curr->right != NULL){
                MirrorOrder(res,curr->right);
            }
            else{
                res.push_back(0);
            }
            if(curr->left != NULL){
                MirrorOrder(res,curr->left);
            }
            else{
                res.push_back(0);
            }
        }
    }
};