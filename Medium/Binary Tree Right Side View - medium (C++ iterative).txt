/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        queue<TreeNode*> q;
        int rightMost;
        if (root == NULL)
            return ans;
        q.push(root);
        ans.push_back(root->val);
        while(!q.empty()){
            int level = q.size();
            for(int i =0; i<level; i++){
                TreeNode* curr = q.front();
                if(curr->left!=NULL){
                    q.push(curr->left);
                    rightMost = curr->left->val;
                }
                if(curr->right!=NULL){
                    q.push(curr->right);
                    rightMost = curr->right->val;
                }
                q.pop();
            }
            ans.push_back(rightMost);
        }
        ans.pop_back();
        return ans;
    }
};