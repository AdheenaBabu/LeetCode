{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Bitset \{\
private:\
    vector<int> bits;\
    int count1s;\
    bool flipped;\
public:\
    Bitset(int size) \{\
        bits.resize(size,0);\
        count1s = 0;\
        flipped = false;\
    \}\
    \
    void fix(int idx) \{\
        if(!flipped)\{\
            if(bits[idx] == 0)\{\
                bits[idx] = 1;\
                count1s++;\
            \}\
        \}\
        else\{\
            if(bits[idx] == 1)\{\
                bits[idx] = 0;\
                count1s++;\
            \}\
        \}\
    \}\
    \
    void unfix(int idx) \{\
        if(!flipped)\{\
            if(bits[idx] == 1)\{\
                bits[idx] = 0;\
                count1s--;\
            \}\
        \}\
        else\{\
            if(bits[idx] == 0)\{\
                bits[idx] = 1;\
                count1s--;\
            \}\
        \}\
    \}\
    \
    void flip() \{\
        flipped = !flipped;\
        count1s = bits.size() - count1s;\
    \}\
    \
    bool all() \{\
        return bits.size() == count1s;\
    \}\
    \
    bool one() \{\
        return count1s>=1;\
    \}\
    \
    int count() \{\
        return count1s;\
    \}\
    \
    string toString() \{\
        string s = "";\
        \
        if(!flipped)\{\
            for(auto &it: bits)\{\
                if(it==0) \
                    s += '0';\
                else\
                    s += '1';\
            \}\
        \}        \
        else\{\
            for(auto &it: bits)\{\
                if(it==0) \
                    s += '1';\
                else\
                    s += '0';\
            \}\
        \} \
        return s;\
    \}\
\};\
\
/**\
 * Your Bitset object will be instantiated and called as such:\
 * Bitset* obj = new Bitset(size);\
 * obj->fix(idx);\
 * obj->unfix(idx);\
 * obj->flip();\
 * bool param_4 = obj->all();\
 * bool param_5 = obj->one();\
 * int param_6 = obj->count();\
 * string param_7 = obj->toString();\
 */}