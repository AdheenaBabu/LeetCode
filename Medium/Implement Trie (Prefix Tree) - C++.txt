class TrieNode{
public:
    bool endsHere;
    TrieNode* children[26] = {};
    TrieNode(){
        this->endsHere = false;
    }
};     

class Trie {
    TrieNode* root;
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* curr = root;
        for(char ch : word){
            if(curr->children[ch - 'a'] == NULL){
                curr->children[ch - 'a'] = new TrieNode();
            }
            curr = curr->children[ch - 'a'];
        }
        curr->endsHere = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* curr = root;
        for(char ch : word){
            if(curr->children[ch - 'a'] == NULL){
                return false;
            }
            curr = curr->children[ch - 'a'];
        }
        return curr->endsHere;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* curr = root;
        for (char ch : prefix){
            if(curr->children[ch - 'a'] == NULL){
                return false;
            }
            curr = curr->children[ch - 'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */