{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    vector<vector<string>> partition(string s) \{\
        vector<vector<string>> ans;\
        vector<string> parts;\
        partitionUtil(ans, s, parts, 0);\
        return ans;\
    \}\
    \
    void partitionUtil(vector<vector<string>> &ans, string &s, vector<string> parts, int startIndex)\{\
        int n = s.size();\
        if(startIndex == n)\{\
            ans.push_back(parts);\
            return;\
        \}\
        for(int i=startIndex; i<n; i++)\{\
            if(isPalindrome(s, startIndex, i))\{\
                parts.push_back(s.substr(startIndex, i - startIndex + 1));\
                partitionUtil(ans, s, parts, i+1);\
                parts.pop_back();\
            \}\
        \}\
    \}\
    \
    bool isPalindrome(string &s, int start, int end)\{\
        while(start < end)\{\
            if(s[start++] != s[end--])\
                return false;\
        \}\
        return true;\
    \}\
\};}