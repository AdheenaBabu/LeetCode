class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        map<char,int> taskFreq;
        int freq = 0;
        int highFreqTasks = 0;
        for (int i=0; i<tasks.size(); i++){
            taskFreq[tasks[i]]++;
            if(freq == taskFreq[tasks[i]]){
                highFreqTasks++;
            }
            else if(freq < taskFreq[tasks[i]]){
                freq = taskFreq[tasks[i]];
                highFreqTasks = 1;
            }
        }
        int emptySlots = (freq-1)*(n-(highFreqTasks - 1));
        int availTasks = tasks.size() - highFreqTasks*freq;
        int idleSlots = max(0,(emptySlots - availTasks));
        int CPU_time = tasks.size() + idleSlots;
        return CPU_time;
    }
};